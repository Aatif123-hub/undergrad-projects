# -*- coding: utf-8 -*-
"""AIproj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ClxRxApki0mvybHhPuRrM3r6-avKeCKc
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.inspection import PartialDependenceDisplay

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

data = pd.read_csv('/content/drive/My Drive/exchange_rates.csv')

print("Initial Data Overview:")
print(data.head())
print(data.info())

data.rename(columns={'Unnamed: 0': 'date'}, inplace=True)
data['date'] = pd.to_datetime(data['date'])
data.set_index('date', inplace=True)

#Handle missing values with forward fill
data.fillna(method='ffill', inplace=True)
print("\nMissing values after forward-fill:")
print(data.isnull().sum())

#Focus on Euro exchange rate and create the 1-day lagged variable
euro_data = data[['euro']].copy()
euro_data['euro_lag_1'] = euro_data['euro'].shift(1)
euro_data.dropna(inplace=True)

X = euro_data[['euro_lag_1']]
y = euro_data['euro']

#(80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Initialize and train the Random Forest Regressor
rf_model = RandomForestRegressor(n_estimators=100, random_state=42, oob_score=True)
rf_model.fit(X_train, y_train)

y_pred = rf_model.predict(X_test)

oob_score = rf_model.oob_score_
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Out-of-Bag Score: {oob_score}')
print("Mean Squared Error (MSE):", mse)
print('Mean Absolute Error (MAE):', mae)
print(f'R-squared Score: {r2}')

plt.figure(figsize=(10, 5))
plt.plot(y_test.index, y_test, color='green', label='Actual', alpha=0.5)
plt.plot(y_test.index, y_pred, color='red', label='Predicted', linestyle='--', alpha=0.5)
plt.xlabel('Date')
plt.ylabel('Euro Exchange Rate')
plt.title('Actual vs Predicted Euro Exchange Rates Over Time')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()